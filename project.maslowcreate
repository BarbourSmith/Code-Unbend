{
    "molecules": [
        {
            "atomType": "Molecule",
            "name": "Code Unbend",
            "x": 0,
            "y": 0,
            "uniqueID": 646147,
            "ioValues": [
                {
                    "name": "geometry",
                    "ioValue": 10
                }
            ],
            "topLevel": true,
            "allAtoms": [
                {
                    "atomType": "Input",
                    "name": "geometry",
                    "x": 15,
                    "y": 149,
                    "uniqueID": 103496,
                    "ioValues": []
                },
                {
                    "atomType": "Code",
                    "name": "Code",
                    "x": 557,
                    "y": 116,
                    "uniqueID": 162772,
                    "ioValues": [
                        {
                            "name": "geometry",
                            "ioValue": 10
                        }
                    ],
                    "code": "//You can learn more about all of the available methods at https://jsxcad.js.org/app/UserGuide.html \n\n\n\nfunction main(geometry){\n  \n  console.log(\"This part ran\")\n  \n  function unbend(fullShape){\n    console.log(\"In unbend\")\n    console.log(fullShape)\n    \n    const tags = fullShape.tags();\n    \n    var i = 0;\n    while(i < tags.length){\n        console.log(\"While\");\n        const tag = tags[i];\n        i++;\n        \n        //Go until we find the first bend\n        if(tag.substring(0,4) == 'bend'){\n            console.log(\"If\")\n            //Grab the settings used to create the initial bend\n            const settings = JSON.parse(tag.substring(8, tag.length));\n           \n            //Create the unrolled part of the bend \n            const partialCircumference = (Math.PI*2*(settings.interiorRadius+(settings.thickness*settings.kFactor)))/4;  \n            const flattenedBend = difference(\n                assemble(\n                    Square(partialCircumference, settings.thickness).extrude(settings.length).rotateX(90).right(),\n                    Plan.Connector(\"Flat Base\").flip().rotateY(90).translate(0, - settings.length/2, 0 ),\n                    Plan.Connector(\"Flat Top\").rotateY(90).flip().translate(partialCircumference, - settings.length/2, 0 )\n                ), \n                Square(.2,settings.length/4).extrude(30).translate(partialCircumference/2 - .1,-settings.length/2,-settings.thickness)\n            );\n           //Grab a copy of the bend \n           const originalBend = fullShape.keep(tag);\n           \n            //Grab the geometry attached to the bend\n            const attached = originalBend.keep(\"attachedGeometry\" + settings.bendID).kept();\n            //Sitck the unrolled part onto the correct edge\n            const unrolledBend = flattenedBend.connector(\"Flat Base\").to(originalBend.connector(\"Bend Base\" + settings.bendID), { doConnect: false }).notAs(tag);\n            //Stick the tab onto the unrolled part\n            console.log(\"Values: \")\n            console.log(flattenedBend)\n            console.log(unrolledBend)\n            console.log(\"After\")\n            const unbent = attached.connector(\"Base\" + settings.bendID).to(unrolledBend.connector(\"Flat Top\")).notAs(tag);\n            \n            //Return the whole shape with one more tab unbent now\n            console.log(\"End\")\n            return unbend(assemble(fullShape.drop(tag).kept(), unbent));\n        }\n    }\n    \n    return fullShape;\n  }\n  \n  return unbend(geometry);\n  \n}\n\nreturn main(geometry)"
                },
                {
                    "atomType": "Output",
                    "name": "Output",
                    "x": 1316,
                    "y": 164,
                    "ioValues": []
                }
            ],
            "allConnectors": [
                {
                    "ap1Name": "number or geometry",
                    "ap2Name": "geometry",
                    "ap2Primary": false,
                    "ap1ID": 103496,
                    "ap2ID": 162772
                },
                {
                    "ap1Name": "geometry",
                    "ap2Name": "number or geometry",
                    "ap2Primary": false,
                    "ap1ID": 162772
                }
            ],
            "fileTypeVersion": 1
        }
    ],
    "circleSegmentSize": 1
}